#!/usr/bin/env node

/**
 * Module dependencies.
 */


var app = require('../app');
var cluster = require('cluster');
var debug = require('debug')('admusic:server');
var http = require('http');
var numCPUS = 1   //require('os').cpus().length

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}
/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * Listen on provided port, on all network interfaces.
 */
var boot = function () {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    console.log(" Starting express server on port: " + app.get('port'));
}
var shutdown = function () {
    server.close();
}

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = http.createServer(app);
boot();
/*
if (cluster.isMaster) {
    for (var i = 0; i < numCPUS; i++) {
        cluster.fork();
    }

    cluster.on('online', function (worker) {
        console.log('Worker is running on: ' + worker.process.pid)
    });
    cluster.on('exit', function (worker, code, signal) {
        console.log('Worker with %s closed: ' + worker.process.pid)
    });
} else {
    /!**
     * Get port from environment and store in Express.
     *!/
    var port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);
    /!**
     * Create HTTP server.
     *!/
    var server = http.createServer(app);
    boot();
    console.log('Worker (%s) is now listening to http://localhost:%s', cluster.worker.process.pid, port)
}
*/






